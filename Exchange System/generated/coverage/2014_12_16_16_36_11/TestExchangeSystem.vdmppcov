class TestExchangeSystem is subclass of MyTestCase


instance variables
	private e : ExchangeSystem := new ExchangeSystem();
	
	
operations
/*
  Contains the test cases for the exchange system.
  Illustrates a scenario-based testing approach.
  Uncomment the tests before running them.
  Class 5, T3, FEUP, MFES, 2014/2015.
*/

	/***** USE CASE SCENARIOS ******/
	 /*
	 Requirement R05 - Car year canno't be bigger than 2014 (current year) neither smaller than 1970.
	 */

	 public testYearCar(e:ExchangeSystem) res:bool ==
	 (
	 	
	   for i = 1 to len e.getSellOrders() do
	   (
	     assertNotLesser(1970, e.getSellOrders()(i).getCar().getYear());
	     assertNotGreater(2014, e.getSellOrders()(i).getCar().getYear());
	    );
	 		
	    for i = 1 to len e.getBuyOrders() do
	    (
	 	assertNotLesser(1970, e.getBuyOrders()(i).getMinYear());
	 	assertNotGreater(2014, e.getBuyOrders()(i).getMinYear());
	 			
	     );

	  return true;
	 );
	 
	  /*
	 Requirement R06 - Car price cannot be bigger than 999999 neither smaller than 0.0
	 */
	 
	 
	 public testPriceCar(e:ExchangeSystem) res:bool ==
	 (
	   for i = 1 to len e.getSellOrders() do
	   (
	 	assertNotLesser(0.0, e.getSellOrders()(i).getCar().getPrice());
	 	assertNotGreater(999999, e.getSellOrders()(i).getCar().getPrice());
	    );
	 		
	    for i = 1 to len e.getBuyOrders() do
	    (
	 	assertNotLesser(0.0, e.getBuyOrders()(i).getMaxPrice());
	 	assertNotGreater(999999, e.getBuyOrders()(i).getMaxPrice());
	     );
	 		
	  return true;
	 );
	 
	 /*
	 Requirement R07 - Seller minimum quantity and buyer quantity canno't be smaller than 1.
	 */
	 
	 public testMinimumQuantity(e:ExchangeSystem) res:bool ==
	 (
	   for i = 1 to len e.getSellOrders() do
	 	assertNotLesser(1, e.getSellOrders()(i).getMinBuySize());
	 		
	   for i = 1 to len e.getBuyOrders() do
	 	assertNotLesser(1, e.getBuyOrders()(i).getQuantity());
	 		
	   return true;
	 );
	 
	 /*
	 Requirement R08 - Seller minimum quantity canno't be bigger than his maximum quantity
	 */
	 public testSellerQuantity(e:ExchangeSystem) res:bool ==
	 (
	   for i = 1 to len e.getSellOrders() do
	 	assertNotLesser(e.getSellOrders()(i).getMinBuySize(),e.getSellOrders()(i).getSize());
	 			
	   return true;
	 );
	 
	  /*
	 Requirement R09 - Seller place a car on sale.
	 */
	 public testSale(e:ExchangeSystem) res:SellOrder ==
	 (
	  e.addSellOrder("Ferrari F50", <Red>, 1997, 1200, 40000, 1, 2);
	 );
	 
	/*
	Requirement R10 - Buyer purchase proposal.
	*/
	public testPurchase(e:ExchangeSystem) res:BuyOrder ==
	(
	 e.addBuyOrder("Ferrari F50", <Red>, 1997, 1200, 40000, 1);
	);
	
	 /*
	 Requirement R11 - Seller cancels a sale.
	 */
	 public testCancelSale(e:ExchangeSystem) res:bool ==
	 (
	  e.cancelSale(len e.getSellOrders());
	 );

	 /*
	 Requirement R12 - Buyer cancels a purchase.
	 */
	 public testCancelPurchase(e:ExchangeSystem) res:bool ==
	 (
	  e.cancelPurchase(len e.getBuyOrders());
	 );
	 
	 /*
	 Requirement R13 - Seller updates his sale.
	 */
	 public testUpdateSale(e:ExchangeSystem) res:bool ==
	 (
	  e.updateSale(len e.getSellOrders(), "Porsche 911", <White>, 2006, 0, 29800, 1, 1);
	 );
	 
	  /*
	 Requirement R14 - Seller updates his sale.
	 */
	 public testUpdatePurchase(e:ExchangeSystem) res:bool ==
	 (
	  e.updatePurchase(len e.getBuyOrders(), "Porsche 911", <White>, 2006, 0, 29800, 1);
	 );

end TestExchangeSystem
