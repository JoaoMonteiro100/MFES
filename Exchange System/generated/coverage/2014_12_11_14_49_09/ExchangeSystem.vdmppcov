class ExchangeSystem
/*
	Defines the state variables and operations available to the users (both sellers and buyers).
	Class 5, T3, FEUP, MFES, 2014/2015
*/
	types
		public String = seq of char;
		
	instance variables
		public sellOrders: seq of SellOrder := [];
		public buyOrders: seq of BuyOrder := [];
		public so: SellOrder;
		public bo: BuyOrder;	
		--public value: bool * seq1 of char;
		--public filename: seq1 of char := "test.txt";

	operations
		public ExchangeSystem() res: ExchangeSystem ==
		(
			return self;
		);
		
		--Seller operations
		public addSellOrder(m:Car`CarModel, c:Car`CarColor, y:nat1, mi:nat, p:real, mbs:nat1, os:nat1) res: SellOrder ==
    (
     	so := new SellOrder(m,c,y,mi,p,mbs,os);
      placeSellOrder(so);
      return so;
    )
    ext wr so;
    
    public placeSellOrder(so:SellOrder) ==
    (
   		so.setID(len sellOrders + 1);
   		sellOrders := sellOrders ^ [so];
    )
    ext wr sellOrders;
   -- post sellOrders = sellOrders~ ^ [so];
       
    public cancelSale(id:nat1) res: bool ==
		(
			if sellOrders(id).status <> <Canceled> then sellOrders(id).status := <Canceled>;
			return true;
		)
		ext wr sellOrders
		pre len sellOrders > 0;
	
	
		public listSales() ==
		(
			for i = 1 to len sellOrders do
				IO`println(sellOrders(i));
		)
		ext rd sellOrders
		pre len sellOrders > 0;
		/*
		readFromFile : seq of char ==> seq of char
		readFromFile (fname) ==
  		def mk_(-,mk_input) = IO`freadval[seq of char](fname) 
  			in (value := input
      	);
		
		*/
		/*
		public readFromFile() ==
		(
			def mk_(-,input) = IO`freadval[seq of char](filename)
			in
			IO`println(input);
		);
		*/
		

    --Buyer operations
    public addBuyOrder(m:Car`CarModel, c:Car`CarColor, y:nat, mi:nat, mp:real, q:nat) res: BuyOrder ==
    (
	      bo := new BuyOrder(m,c,y,mi,mp,q);
	      placeBuyOrder(bo);
	      checkSellOrders(bo);
	      return bo;
     )
     ext wr bo;
    
    public placeBuyOrder(bo:BuyOrder) ==
    (
    	bo.setID(len buyOrders + 1);
    	buyOrders := buyOrders ^ [bo];
    )
    ext wr buyOrders;
    --post buyOrders = buyOrders ^ [bo];
    
    public cancelPurchase(id:nat1) res: bool ==
    (
    	if buyOrders(id).status <> <Canceled> then buyOrders(id).status := <Canceled>;
			return true;
		)
		ext wr buyOrders
		pre len buyOrders > 0;
    
    public listPurchases() ==
		(
			for i = 1 to len buyOrders do
				IO`println(buyOrders(i));
		)
		ext rd buyOrders
		pre len buyOrders > 0;
    
    public checkSellOrders(bo:BuyOrder) ==
    	for i = 1 to len sellOrders do
    	(
    		if sellOrders(i).minBuySize <= bo.quantity then
	    	(
	    		if sellOrders(i).car.model = bo.model or bo.model = "" then
	    		(
	    			if sellOrders(i).car.color = bo.color or bo.color = <Null> then
	    			(
	    				if sellOrders(i).car.year >= bo.minYear then
	    				(
	    					if sellOrders(i).car.mileage <= bo.maxMileage then
	    					(
	    						if sellOrders(i).car.price <= bo.maxPrice then
	    						(
	    							sellOrders(i).status := <Sold>;
	    							bo.status := <Purchased>;
	    							
	    							IO`print("Purchase proposal number ");
	    							IO`print(bo.id);
	    							IO`print("assigned to sales number ");
	    							IO`print(sellOrders(i).id);
										IO`print("\n\n");
	    						)
	    					)
	    				)
	    			)
    			)
    		)
    	)
    	ext wr sellOrders, buyOrders, bo, so
    	pre len sellOrders > 0;
    
end ExchangeSystem